/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * StudentRecordsPanel.java
 *
 * Created on 10 15, 11, 1:53:08 PM
 */
package ised.gui.panel;

import com.mysql.jdbc.Blob;
import ised.gui.Registrar;
import ised.gui.dialog.EnterGradeDialog;
import ised.model.SchoolYear;
import ised.model.Student;
import ised.model.SummerStudent;
import ised.model.Class;
import ised.model.Enrollment;
import ised.model.StudentSubject;
import ised.model.Subject;
import ised.service.implementation.AdmissionServiceImpl;
import ised.service.implementation.ClassServiceImpl;
import ised.service.implementation.SchoolYearServiceImpl;
import ised.service.implementation.StudentSubjectServiceImpl;
import ised.service.implementation.SummerStudentServiceImpl;
import ised.service.interfaces.AdmissionService;
import ised.service.interfaces.ClassService;
import ised.service.interfaces.SchoolYearService;
import ised.service.interfaces.StudentSubjectService;
import ised.service.interfaces.SummerStudentService;
import ised.tools.ComponentFormatter;
import ised.tools.Theme;
import ised.tools.ExceptionHandler;
import java.awt.Image;
import java.awt.Toolkit;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.Icon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ABDUL
 */
public class SummerStudentsPanel extends javax.swing.JPanel {

    Registrar parentFrame;
    private List<Enrollment> summerStudentList;
    private List<Class> sectionList;
    private List<SummerStudent> subjectList;
    private Enrollment selectedStudent;
    private SchoolYear currentSchoolYear;
    private DefaultTableModel studentTableModel;
    private DefaultTableModel subjectTableModel;
    private SummerStudentService summerStudentService;
    private StudentSubjectService studentSubjectService;
    private AdmissionService admissionService;
    private SchoolYearService schoolYearService;
    private SchoolYear nextSchoolYear;
    private ClassService classService;
    private Class selectedSection;

    /** Creates new form StudentRecordsPanel */
    public SummerStudentsPanel(Registrar parentFrame, SchoolYear schoolYear) throws ExceptionHandler {
        Theme.setDefaultLookAndFeel();
        initComponents();
        this.parentFrame = parentFrame;
        summerStudentService = new SummerStudentServiceImpl();
        classService = new ClassServiceImpl();
        studentSubjectService = new StudentSubjectServiceImpl();
        admissionService = new AdmissionServiceImpl();
        schoolYearService = new SchoolYearServiceImpl();
        sectionList = new ArrayList<Class>();
        summerStudentList = new ArrayList<Enrollment>();
        subjectList = new ArrayList<SummerStudent>();
        currentSchoolYear = schoolYear;
        nextSchoolYear = schoolYearService.getNextSchoolYear(currentSchoolYear.getSchoolYearID());
        studentTableModel = (DefaultTableModel) studentTable.getModel();
        subjectTableModel = (DefaultTableModel) subjectTable.getModel();
        setSectionComboBox();
        displayStudentList();
    }

    public void displayStudentList() throws ExceptionHandler {
        ComponentFormatter.clearTable(studentTableModel);
        selectedSection = (Class) sectionComboBox.getSelectedItem();
        if (selectedSection != null) {
            summerStudentList = summerStudentService.getSummerStudentsList(currentSchoolYear.getSchoolYearID(), selectedSection.getClassID());
            for (Enrollment student : summerStudentList) {
                studentTableModel.addRow(new Object[]{student.getAdmission().getStudent().getStudentID(), student.getAdmission().getStudent().getFullName()});
            }
        }
        totalStudents.setText(Integer.toString(studentTableModel.getRowCount()));
    }

    private void setSectionComboBox() throws ExceptionHandler {
        DefaultComboBoxModel sectionComboBoxModel = (DefaultComboBoxModel) sectionComboBox.getModel();
        sectionList = classService.getClassList(currentSchoolYear.getSchoolYearID());
        sectionComboBoxModel.removeAllElements();
        sectionComboBoxModel.addElement(null);
        for (Class section : sectionList) {
            sectionComboBoxModel.addElement(section);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        studentTable = new javax.swing.JTable();
        sectionComboBox = new javax.swing.JComboBox();
        section = new javax.swing.JLabel();
        updateStudents = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        totalStudents = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        pictureLabel = new javax.swing.JLabel();
        studentProfileTable = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        subjectTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        admitToButton = new javax.swing.JButton();
        retainButton = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(0, 153, 51));
        jPanel1.setFont(new java.awt.Font("Tahoma", 1, 12));

        jPanel22.setBackground(new java.awt.Color(0, 204, 51));
        jPanel22.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel22.setFont(new java.awt.Font("Tahoma", 1, 12));
        jPanel22.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        studentTable.setAutoCreateRowSorter(true);
        studentTable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        studentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID No.", "Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        studentTable.setDoubleBuffered(true);
        studentTable.setDragEnabled(true);
        studentTable.getTableHeader().setResizingAllowed(false);
        studentTable.getTableHeader().setReorderingAllowed(false);
        studentTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                studentTableMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                studentTableMouseEntered(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                studentTableMousePressed(evt);
            }
        });
        jScrollPane3.setViewportView(studentTable);
        studentTable.getColumnModel().getColumn(0).setMinWidth(120);
        studentTable.getColumnModel().getColumn(0).setPreferredWidth(120);
        studentTable.getColumnModel().getColumn(0).setMaxWidth(120);

        jPanel22.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 42, 300, 400));

        sectionComboBox.setFont(new java.awt.Font("Tahoma", 0, 12));
        sectionComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<All>", "1st year", "2nd year", "3rd year", "4th year", " " }));
        sectionComboBox.setToolTipText("");
        sectionComboBox.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        sectionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sectionComboBoxActionPerformed(evt);
            }
        });
        jPanel22.add(sectionComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(235, 13, 86, -1));

        section.setFont(new java.awt.Font("Tahoma", 0, 12));
        section.setText("Section:");
        jPanel22.add(section, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 10, -1, 30));

        updateStudents.setFont(new java.awt.Font("Tahoma", 1, 12));
        updateStudents.setText("Update Students");
        updateStudents.setOpaque(false);
        updateStudents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateStudentsActionPerformed(evt);
            }
        });
        jPanel22.add(updateStudents, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 450, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel2.setText("Total Students:");
        jPanel22.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 460, -1, -1));

        totalStudents.setFont(new java.awt.Font("Tahoma", 1, 12));
        totalStudents.setText("---");
        jPanel22.add(totalStudents, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 460, -1, -1));

        jPanel3.setBackground(new java.awt.Color(0, 204, 51));
        jPanel3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        pictureLabel.setBackground(new java.awt.Color(255, 255, 255));
        pictureLabel.setFont(new java.awt.Font("Tahoma", 1, 12));
        pictureLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pictureLabel.setText("PICTURE");
        pictureLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pictureLabel.setOpaque(true);

        studentProfileTable.setFont(new java.awt.Font("Tahoma", 1, 12));
        studentProfileTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {" ID NUMBER", null},
                {" NAME", null},
                {" YR LEVEL & SECTION", null}
            },
            new String [] {
                "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        studentProfileTable.setRowHeight(22);
        studentProfileTable.setSelectionBackground(new java.awt.Color(255, 255, 255));
        studentProfileTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        studentProfileTable.setShowVerticalLines(false);

        subjectTable.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        subjectTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Subject", "Units", "Grade", "Complete Grade"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(subjectTable);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14));
        jLabel3.setText("Summer Subjects");

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 13));
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ised/resources/images/pencil.png"))); // NOI18N
        jButton3.setText("Enter Grade");
        jButton3.setOpaque(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        admitToButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        admitToButton.setText("Admit to ");
        admitToButton.setEnabled(false);
        admitToButton.setOpaque(false);
        admitToButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                admitToButtonActionPerformed(evt);
            }
        });

        retainButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        retainButton.setText("Retain year level");
        retainButton.setEnabled(false);
        retainButton.setOpaque(false);
        retainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retainButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(pictureLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(admitToButton, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                    .addComponent(retainButton, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 512, Short.MAX_VALUE)
                            .addComponent(jLabel3)
                            .addComponent(studentProfileTable, javax.swing.GroupLayout.DEFAULT_SIZE, 512, Short.MAX_VALUE)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 504, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(20, 20, 20))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(pictureLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(admitToButton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(retainButton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(studentProfileTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(33, 33, 33))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jPanel22, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(48, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel22, javax.swing.GroupLayout.PREFERRED_SIZE, 495, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 551, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void sectionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sectionComboBoxActionPerformed
        try {
            // TODO add your handling code here:
            displayStudentList();
        } catch (ExceptionHandler ex) {
            Logger.getLogger(SummerStudentsPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_sectionComboBoxActionPerformed

    private void studentTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_studentTableMouseClicked
        // TODO add your handling code here:
        try {
            int index = studentTable.getSelectedRow();
            if (index >= 0) {
                Enrollment student = summerStudentList.get(index);
                selectedStudent = student;
                displayStudentProfile();
                displaySubjectList();
                admitToButton.setText("Admit to " + getYearLevelText(student.getAdmission().getYearLevelAdmitted()));
                updateButtons();
            }
        } catch (ExceptionHandler ex) {
        }
    }//GEN-LAST:event_studentTableMouseClicked

    private String getYearLevelText(int yearLevel) {
        if (yearLevel == 1) {
            return "2nd year";
        } else if (yearLevel == 2) {
            return "3rd year";
        } else if (yearLevel == 3) {
            return "4th year";
        } else if (yearLevel == 4) {
            return "College";
        }
        return "";
    }

    private void studentTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_studentTableMousePressed
    }//GEN-LAST:event_studentTableMousePressed

    private void studentTableMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_studentTableMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_studentTableMouseEntered

    private void updateStudentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateStudentsActionPerformed
        // TODO add your handling code here:
        List<StudentSubject> studentList = new ArrayList<StudentSubject>();
        try {
            //clearList();
            studentList = studentSubjectService.getFailedStudentList(currentSchoolYear.getSchoolYearID());
            for (StudentSubject subject : studentList) {
                if (!isExist(subject)) {
                    summerStudentService.addSummerStudent(subject.getStudentSubjectID());
                    displayStudentList();
                }
            }
        } catch (ExceptionHandler ex) {
            Logger.getLogger(SummerStudentsPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_updateStudentsActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        int index = subjectTable.getSelectedRow();
        if (index >= 0) {
            SummerStudent subject = subjectList.get(index);
            EnterGradeDialog enterGrade = new EnterGradeDialog(parentFrame, true, subject);
            enterGrade.setVisible(true);
            if (enterGrade.success) {
                try {
                    displaySubjectList();
                    updateButtons();
                } catch (ExceptionHandler ex) {
                    Logger.getLogger(SummerStudentsPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void admitToButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_admitToButtonActionPerformed
        try {
            if (nextSchoolYear != null) {
                if (!admissionService.isStudentAdmitted(nextSchoolYear.getSchoolYearID(), selectedStudent.getAdmission().getStudent().getStudentID())) {
                    admissionService.admitStudent(nextSchoolYear.getSchoolYearID(), selectedStudent.getAdmission().getYearLevelAdmitted() + 1, selectedStudent.getAdmission().getStudent().getStudentID(), selectedStudent.getEnrollmentID());
                    JOptionPane.showMessageDialog(parentFrame, "Student is admitted to " + getYearLevelText(selectedStudent.getAdmission().getYearLevelAdmitted()), "Admit Student", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(parentFrame, "Student is already admitted to next school year level", "Admit Student", JOptionPane.WARNING_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(parentFrame, "Next school year is not set. Please contact the administrator to set the school year", "Admit Student", JOptionPane.WARNING_MESSAGE);
            }
        } catch (ExceptionHandler ex) {
            Logger.getLogger(SummerStudentsPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_admitToButtonActionPerformed

    private void retainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_retainButtonActionPerformed
        try {
            // TODO add your handling code here:
            if (nextSchoolYear != null) {
                if (!admissionService.isStudentAdmitted(nextSchoolYear.getSchoolYearID(), selectedStudent.getAdmission().getStudent().getStudentID())) {
                    admissionService.admitStudent(nextSchoolYear.getSchoolYearID(), selectedStudent.getAdmission().getYearLevelAdmitted(), selectedStudent.getAdmission().getStudent().getStudentID(), selectedStudent.getEnrollmentID());
                    JOptionPane.showMessageDialog(parentFrame, "Student is admitted to " + getYearLevelText(selectedStudent.getAdmission().getYearLevelAdmitted()-1), "Admit Student", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(parentFrame, "Student is already admitted to next school year level", "Admit Student", JOptionPane.WARNING_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(parentFrame, "Next school year is not set. Please contact the administrator to set the school year", "Admit Student", JOptionPane.WARNING_MESSAGE);
            }
        } catch (ExceptionHandler ex) {
            Logger.getLogger(SummerStudentsPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_retainButtonActionPerformed

    private boolean isExist(StudentSubject subject) throws ExceptionHandler {
        for (Enrollment student : summerStudentList) {
            List<SummerStudent> subjectList = summerStudentService.getSubjectList(student.getEnrollmentID());
            for (SummerStudent summerSubject : subjectList) {
                if (subject.getStudentSubjectID() == summerSubject.getStudentSubject().getStudentSubjectID()) {
                    return true;
                }
            }
        }
        return false;
    }

    public String getYearLevel(int yearLevel) {
        if (yearLevel == 1) {
            return "I";
        } else if (yearLevel == 2) {
            return "II";
        } else if (yearLevel == 3) {
            return "III";
        } else if (yearLevel == 4) {
            return "IV";
        }
        return "";
    }

    public void displayStudentProfile() {
        if (selectedStudent != null) {
            Student student = selectedStudent.getAdmission().getStudent();
            String yearLevelSection = getYearLevel(selectedStudent.getAdmission().getYearLevelAdmitted()) + " - " + selectedStudent.getSection().toString();
            studentProfileTable.setValueAt(" " + String.valueOf(student.getStudentID()), 0, 1);
            studentProfileTable.setValueAt(" " + student.getFullName(), 1, 1);
            studentProfileTable.setValueAt(" " + yearLevelSection, 2, 1);

            if (student.getPicture() != null) {
                Object obj = student.getPicture();
                pictureLabel.setText("");
                if (obj instanceof com.mysql.jdbc.Blob) {
                    pictureLabel.setIcon(new javax.swing.ImageIcon(ComponentFormatter.convertToActualSizeImage((Blob) obj)));
                } else {
                    Image image = Toolkit.getDefaultToolkit().getImage(obj.toString()).getScaledInstance(ComponentFormatter.IMAGE_WIDTH, ComponentFormatter.IMAGE_HEIGHT, 129);
                    obj = new javax.swing.ImageIcon(image);
                    pictureLabel.setIcon((Icon) obj);
                }
            } else {
                pictureLabel.setText("PICTURE");
                pictureLabel.setIcon(null);
            }
        }
    }

    private void updateButtons() throws ExceptionHandler {
        if (summerStudentService.isGradesComplete(selectedStudent.getEnrollmentID())) {
            if (isStudentPassed()) {
                admitToButton.setEnabled(true);
            } else {
                retainButton.setEnabled(true);
            }
        } else {
            admitToButton.setEnabled(false);
            retainButton.setEnabled(false);
        }
    }

    private void displaySubjectList() throws ExceptionHandler {
        if (selectedStudent != null) {
            subjectList = summerStudentService.getSubjectList(selectedStudent.getEnrollmentID());
            ComponentFormatter.clearTable(subjectTableModel);
            for (SummerStudent studentSubject : subjectList) {
                Subject subject = studentSubject.getStudentSubject().getSubject();
                subjectTableModel.addRow(new Object[]{subject.getSubjectCode(), subject.getUnits(), studentSubject.getStudentSubject().getFinalGrade(),
                            studentSubject.getCompleteGrade()});
            }
        }
    }

    private boolean isStudentPassed() throws ExceptionHandler {
        subjectList = summerStudentService.getSubjectList(selectedStudent.getEnrollmentID());
        for (SummerStudent studentSubject : subjectList) {
            if (studentSubject.getCompleteGrade() > 3) {
                return false;
            }
        }
        return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton admitToButton;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel pictureLabel;
    private javax.swing.JButton retainButton;
    private javax.swing.JLabel section;
    private javax.swing.JComboBox sectionComboBox;
    private javax.swing.JTable studentProfileTable;
    private javax.swing.JTable studentTable;
    private javax.swing.JTable subjectTable;
    private javax.swing.JLabel totalStudents;
    private javax.swing.JButton updateStudents;
    // End of variables declaration//GEN-END:variables
}
